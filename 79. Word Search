Given an m x n grid of characters board and a string word, return true if word exists in the grid.

The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.





function exist(board, word) {
    const rows = board.length
    const cols = board[0].length

    const dfs = (i, j, k) => {
        
        if (i < 0 || i >= rows || j < 0 || j >= cols || board[i][j] !== word[k]) {
            return false
        }
        
        if (k === word.length - 1) {
            return true
        }
        const temp = board[i][j]
        board[i][j] = '#'

        const found = dfs(i + 1, j, k + 1) || dfs(i - 1, j, k + 1) || dfs(i, j + 1, k + 1) || dfs(i, j - 1, k + 1)

        board[i][j] = temp
        return found
    }


    for (let i = 0; i < rows; i++) {
        for (let j = 0; j < cols; j++) {

            if (board[i][j] === word[0] && dfs(i, j, 0)) {
                return true
            }
        }
    }
    return false
}
